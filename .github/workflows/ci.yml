name: CI

on:
  push:
    branches:
      - "**" # This will trigger on all branches

jobs:
  build_and_lint_and_test:
    if: github.ref != 'refs/heads/main' # Only run on branches that are not main
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [build, lint, test] # Define tasks to run in parallel

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "22" # Specify the Node.js version you want to use

      - name: Install dependencies
        run: npm install

      - name: Run ${{ matrix.task }}
        run: npm run ${{ matrix.task }} # Execute the npm script defined in the strategy.matrix.tasks (e.g., build, lint, test)

  deploy:
    if: github.ref == 'refs/heads/main' # Only run on the main branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "22" # Specify the Node.js version you want to use

      - name: Install dependencies
        run: npm install

      - name: Test env variables
        run: |
          echo "apiKey: '${{ secrets.FIREBASE_API_KEY }}'" 
          echo "authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}'" 
          echo "projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'" 
          echo "storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}'" 
          echo "messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}'" 
          echo "appId: '${{ secrets.FIREBASE_APP_ID }}'" 
          echo "measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}'"

      - name: Generate firebase.ts
        run: |
          echo "import { initializeApp } from 'firebase/app';" > src/firebase.ts
          echo "import { getAuth } from 'firebase/auth';" >> src/firebase.ts
          echo "import { getFirestore } from 'firebase/firestore';" >> src/firebase.ts
          echo "" >> src/firebase.ts
          echo "const getFirebaseConfig = () => {" >> src/firebase.ts
          echo "  return {" >> src/firebase.ts
          echo "    apiKey: '${{ secrets.FIREBASE_API_KEY }}'," >> src/firebase.ts
          echo "    authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}'," >> src/firebase.ts
          echo "    projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'," >> src/firebase.ts
          echo "    storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}'," >> src/firebase.ts
          echo "    messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}'," >> src/firebase.ts
          echo "    appId: '${{ secrets.FIREBASE_APP_ID }}'," >> src/firebase.ts
          echo "    measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}'," >> src/firebase.ts
          echo "  };" >> src/firebase.ts
          echo "};" >> src/firebase.ts
          echo "" >> src/firebase.ts
          echo "const firebaseConfig = getFirebaseConfig();" >> src/firebase.ts
          echo "" >> src/firebase.ts
          echo "const app = initializeApp(firebaseConfig);" >> src/firebase.ts
          echo "const auth = getAuth(app);" >> src/firebase.ts
          echo "const db = getFirestore(app);" >> src/firebase.ts
          echo "" >> src/firebase.ts
          echo "export { auth, db };" >> src/firebase.ts

      - name: Build
        run: npm run build

      - name: Deploy to Firebase
        run: npm run firebase deploy
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }} # Make sure to set this secret in your repository settings
